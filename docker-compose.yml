version: '2.3'

# versions: change these in order to pin versions for a certain releases
x-versions:
  services: &IMAGE_RAIDEN_SERVICES_VERSION
    image: raidennetwork/raiden-services:stable
  db: &IMAGE_DB_VERSION
    image: raidennetwork/raiden-services-bundle:2019.11.1-db
  synapse: &IMAGE_SYNAPSE_VERSION
    image: raidennetwork/raiden-services-bundle:2019.11.1-synapse
  well-known-server: &IMAGE_WELL_KNOWN_VERSION
    image: raidennetwork/raiden-services-bundle:2019.11.1-well_known_server
  traefik: &IMAGE_TRAEFIK_VERSION
    image: traefik:1.7
  purger: &IMAGE_PURGER_VERSION
    image: python:3
# /versions

x-defaults: &services-defaults
  <<: *IMAGE_RAIDEN_SERVICES_VERSION
  env_file: .env
  volumes:
    - ${DATA_DIR:-./data}/state:/state
    - ${DATA_DIR:-./data}/keystore:/keystore

services:
# raiden-services containers
  pfs:
    << : *services-defaults
    command: ["python3", "-m", "pathfinding_service.cli"]
    restart: always
    ports:
      - 6001:6000
    environment:
      - PFS_STATE_DB=/state/pfs-state.db
      - PFS_HOST=0.0.0.0
      - SERVER_NAME
      - PFS_LOG_LEVEL=${LOG_LEVEL}
      - PFS_KEYSTORE_FILE=/keystore/${KEYSTORE_FILE}
      - PFS_PASSWORD=${PASSWORD}
      - PFS_ETH_RPC=${ETH_RPC}
    labels:
      - "traefik.enable=true"
      - "traefik.frontend.rule=Host:pfs.${SERVER_NAME}"
      - "traefik.default.backend.healthcheck.path=/api/v1/info"
    healthcheck:
      disable: true

  ms:
    << : *services-defaults
    command: ["python3", "-m", "monitoring_service.cli"]
    restart: always
    ports:
      - 6002:6000
    environment:
      - MS_STATE_DB=/state/ms-state.db
      - MS_LOG_LEVEL=${LOG_LEVEL}
      - MS_KEYSTORE_FILE=/keystore/${KEYSTORE_FILE}
      - MS_PASSWORD=${PASSWORD}
      - MS_ETH_RPC=${ETH_RPC}
    healthcheck:
      test: 'python3 -c "import sqlite3, sys; from time import sleep; conn=sqlite3.connect(\"/state/ms-state.db\"); r = lambda: conn.execute(\"select latest_commited_block from blockchain ORDER BY latest_commited_block DESC LIMIT 1;\").fetchone()[0]; one = r(); sleep(25); two = r(); print(two); sys.exit(0 if two > one else 1)"'

  msrc:
    << : *services-defaults
    command: ["python3", "-m", "request_collector.cli"]
    restart: always
    ports:
      - 6003:6000
    environment:
      - MSRC_STATE_DB=/state/ms-state.db
      - MSRC_LOG_LEVEL=${LOG_LEVEL}
      - MSRC_KEYSTORE_FILE=/keystore/${KEYSTORE_FILE}
      - MSRC_PASSWORD=${PASSWORD}
      - MSRC_CHAIN_ID=${CHAIN_ID}
    depends_on:
      ms:
        condition: service_healthy
    healthcheck:
      disable: true

# raiden-transport containers
  synapse:
    << : *IMAGE_SYNAPSE_VERSION
    restart: always
    volumes:
      - ./config/synapse:/config
      - ${DATA_DIR:-./data}/well-known:/data_well_known
      - ${DATA_DIR:-./data}/synapse:/data
    environment:
      - SERVER_NAME
      - URL_KNOWN_FEDERATION_SERVERS
    depends_on:
      db:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.default.port=8008"
      - "traefik.default.frontend.rule=Host:${SERVER_NAME}"
      - "traefik.default.backend.healthcheck.path=/_matrix/client/versions"
      - "traefik.metrics.port=9101"
      - "traefik.metrics.frontend.rule=Host:metrics.${SERVER_NAME}"
      - "traefik.metrics.frontend.whiteList.sourceRange=${CIDR_ALLOW_METRICS}"
      - "traefik.metrics.frontend.whiteList.useXForwardedFor=false"
      - "purge_restart_container=true"

  db:
    << : *IMAGE_DB_VERSION
    restart: always
    volumes:
      - ${DATA_DIR:-./data}/db:/var/lib/postgresql/data
    healthcheck:
      test: echo 'select 1' | psql -U postgres > /dev/null || exit 1

  # Serves the .well-known/matrix/server file
  well_known_server:
    << : *IMAGE_WELL_KNOWN_VERSION
    restart: always
    volumes:
      - ${DATA_DIR:-./data}/well-known:/data
    depends_on:
      synapse:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.frontend.rule=Host:${SERVER_NAME}; PathPrefix: /.well-known/matrix"
  purger:
    << : *IMAGE_PURGER_VERSION
    restart: always
    volumes:
      - ./purge:/app
      - /var/run/docker.sock:/var/run/docker.sock
    working_dir: /app
    depends_on:
      synapse:
        condition: service_healthy
      db:
        condition: service_healthy
    environment:
      - PURGE_SLEEP_UNTIL=05:00:00
      - MATRIX_DOCKER_RESTART_LABEL=purge_restart_container
      - MATRIX_DB_URI=postgres://postgres@db:5432/synapse
      - MATRIX_SERVER=http://synapse:8008
      - SERVER_NAME
      - MATRIX_ADMIN_PRIVATE_KEY_PASSWORD=
      - MATRIX_ADMIN_PRIVATE_KEY_GENERATE=1
      - MATRIX_KEEP_NEWER=15
      - MATRIX_KEEP_MIN_MSGS=3000
    command: bash purge.sh
# common traefik
  traefik:
    << : *IMAGE_TRAEFIK_VERSION
    restart: always
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./config/traefik:/etc/traefik
      - ${DATA_DIR:-./data}/traefik:/data
      - /var/run/docker.sock:/var/run/docker.sock
    command: --acme.email=${LETSENCRYPT_EMAIL}
    depends_on:
      synapse:
        condition: service_healthy
      well_known_server:
        condition: service_healthy
      pfs:
        condition: service_started
      ms:
        condition: service_healthy
      msrc:
        condition: service_started
    healthcheck:
      disable: true
    labels:
      - "traefik.enable=true"
      - "traefik.port=8080"
      - "traefik.frontend.rule=Host:proxy.${SERVER_NAME}"
      - "traefik.frontend.whiteList.sourceRange=${CIDR_ALLOW_PROXY}"
